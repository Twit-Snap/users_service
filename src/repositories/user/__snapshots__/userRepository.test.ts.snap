// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserRepository create should create a new user: Created user result 1`] = `
{
  "email": "new@example.com",
  "id": 1,
  "username": "newuser",
}
`;

exports[`UserRepository create should create a new user: Interpolated SQL query 1`] = `
"
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ('newuser', 'new@example.com', 'New', 'User', '2000-01-01T00:00:00.000Z', 'password123')
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    "
`;

exports[`UserRepository create should create a new user: SQL query 1`] = `
[
  "
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    ",
  [
    "newuser",
    "new@example.com",
    "New",
    "User",
    "2000-01-01T00:00:00.000Z",
    "password123",
  ],
]
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate email: Interpolated SQL query 1`] = `
"
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ('newuser', 'existing@example.com', 'New', 'User', '2000-01-01T00:00:00.000Z', 'password123')
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    "
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate email: SQL query 1`] = `
[
  "
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    ",
  [
    "newuser",
    "existing@example.com",
    "New",
    "User",
    "2000-01-01T00:00:00.000Z",
    "password123",
  ],
]
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate username: Interpolated SQL query 1`] = `
"
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ('existinguser', 'new@example.com', 'New', 'User', '2000-01-01T00:00:00.000Z', 'password123')
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    "
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate username: SQL query 1`] = `
[
  "
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    ",
  [
    "existinguser",
    "new@example.com",
    "New",
    "User",
    "2000-01-01T00:00:00.000Z",
    "password123",
  ],
]
`;

exports[`UserRepository findByEmailOrUsername should find user by email or username: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = 'testuser' OR username = 'testuser'"`;

exports[`UserRepository findByEmailOrUsername should find user by email or username: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = $1 OR username = $1",
  [
    "testuser",
  ],
]
`;

exports[`UserRepository findByEmailOrUsername should find user by email or username: User result 1`] = `
{
  "email": "test@example.com",
  "id": 1,
  "username": "testuser",
}
`;

exports[`UserRepository findByEmailOrUsername should return null when user not found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = 'nonexistent' OR username = 'nonexistent'"`;

exports[`UserRepository findByEmailOrUsername should return null when user not found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = $1 OR username = $1",
  [
    "nonexistent",
  ],
]
`;

exports[`UserRepository findByEmailOrUsername should return null when user not found: User result 1`] = `null`;

exports[`UserRepository get should get user by id: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = 1"`;

exports[`UserRepository get should get user by id: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = $1",
  [
    1,
  ],
]
`;

exports[`UserRepository get should get user by id: User result 1`] = `
{
  "email": "test@example.com",
  "id": 1,
  "username": "testuser",
}
`;

exports[`UserRepository get should return null when user not found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = 999"`;

exports[`UserRepository get should return null when user not found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = $1",
  [
    999,
  ],
]
`;

exports[`UserRepository get should return null when user not found: User result 1`] = `null`;

exports[`UserRepository getByUsername should get user by username: Interpolated SQL query 1`] = `"SELECT username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = 'testuser'"`;

exports[`UserRepository getByUsername should get user by username: SQL query 1`] = `
[
  "SELECT username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = $1",
  [
    "testuser",
  ],
]
`;

exports[`UserRepository getByUsername should get user by username: User result 1`] = `
{
  "email": "test@example.com",
  "username": "testuser",
}
`;

exports[`UserRepository getByUsername should return null when user not found: Interpolated SQL query 1`] = `"SELECT username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = 'nonexistent'"`;

exports[`UserRepository getByUsername should return null when user not found: SQL query 1`] = `
[
  "SELECT username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = $1",
  [
    "nonexistent",
  ],
]
`;

exports[`UserRepository getByUsername should return null when user not found: User result 1`] = `null`;

exports[`UserRepository getList should get list of users: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users"`;

exports[`UserRepository getList should get list of users: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users",
]
`;

exports[`UserRepository getList should get list of users: Users list result 1`] = `
[
  {
    "email": "user1@example.com",
    "id": 1,
    "username": "user1",
  },
  {
    "email": "user2@example.com",
    "id": 2,
    "username": "user2",
  },
]
`;

exports[`UserRepository getList should return null when no users found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users"`;

exports[`UserRepository getList should return null when no users found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users",
]
`;

exports[`UserRepository getList should return null when no users found: Users list result 1`] = `null`;
