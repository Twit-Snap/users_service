// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserRepository create should create a new user: Created user result 1`] = `
{
  "email": "new@example.com",
  "id": 1,
  "username": "newuser",
}
`;

exports[`UserRepository create should create a new user: Interpolated SQL query 1`] = `
"
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ('newuser', 'new@example.com', 'New', 'User', '2000-01-01T00:00:00.000Z', 'password123')
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    "
`;

exports[`UserRepository create should create a new user: SQL query 1`] = `
[
  "
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    ",
  [
    "newuser",
    "new@example.com",
    "New",
    "User",
    "2000-01-01T00:00:00.000Z",
    "password123",
  ],
]
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate email: Interpolated SQL query 1`] = `
"
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ('newuser', 'existing@example.com', 'New', 'User', '2000-01-01T00:00:00.000Z', 'password123')
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    "
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate email: SQL query 1`] = `
[
  "
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    ",
  [
    "newuser",
    "existing@example.com",
    "New",
    "User",
    "2000-01-01T00:00:00.000Z",
    "password123",
  ],
]
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate username: Interpolated SQL query 1`] = `
"
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ('existinguser', 'new@example.com', 'New', 'User', '2000-01-01T00:00:00.000Z', 'password123')
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    "
`;

exports[`UserRepository create should throw EntityAlreadyExistsError for duplicate username: SQL query 1`] = `
[
  "
      INSERT INTO users (username, email, name, lastname, birthdate, password)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, username, email, name, lastname, birthdate, created_at AS "createdAt"
    ",
  [
    "existinguser",
    "new@example.com",
    "New",
    "User",
    "2000-01-01T00:00:00.000Z",
    "password123",
  ],
]
`;

exports[`UserRepository createFollow should create a follow successfully 1`] = `
{
  "createdAt": 2023-01-01T00:00:00.000Z,
  "followedId": 2,
  "userId": 1,
}
`;

exports[`UserRepository createFollow should create a follow successfully: Interpolated SQL query 1`] = `
"
      INSERT INTO follows (userId, followedId)
      VALUES (1, 2)
      RETURNING userId, followedId, created_at AS "createdAt"
    "
`;

exports[`UserRepository createFollow should throw EntityAlreadyExistsError when follow already exists 1`] = `"Follow already exists"`;

exports[`UserRepository createFollow should throw EntityAlreadyExistsError when follow already exists: Interpolated SQL query 1`] = `
"
      INSERT INTO follows (userId, followedId)
      VALUES (1, 2)
      RETURNING userId, followedId, created_at AS "createdAt"
    "
`;

exports[`UserRepository deleteFollow should delete a follow successfully: Interpolated SQL query 1`] = `
"
      DELETE FROM follows
      WHERE userId = 1 AND followedId = 2
    "
`;

exports[`UserRepository findByEmailOrUsername should find user by email or username: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = 'testuser' OR username = 'testuser'"`;

exports[`UserRepository findByEmailOrUsername should find user by email or username: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = $1 OR username = $1",
  [
    "testuser",
  ],
]
`;

exports[`UserRepository findByEmailOrUsername should find user by email or username: User result 1`] = `
{
  "email": "test@example.com",
  "id": 1,
  "username": "testuser",
}
`;

exports[`UserRepository findByEmailOrUsername should return null when user not found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = 'nonexistent' OR username = 'nonexistent'"`;

exports[`UserRepository findByEmailOrUsername should return null when user not found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, password, created_at AS "createdAt" FROM users WHERE email = $1 OR username = $1",
  [
    "nonexistent",
  ],
]
`;

exports[`UserRepository findByEmailOrUsername should return null when user not found: User result 1`] = `null`;

exports[`UserRepository get should get user by id: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = 1"`;

exports[`UserRepository get should get user by id: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = $1",
  [
    1,
  ],
]
`;

exports[`UserRepository get should get user by id: User result 1`] = `
{
  "email": "test@example.com",
  "id": 1,
  "username": "testuser",
}
`;

exports[`UserRepository get should return null when user not found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = 999"`;

exports[`UserRepository get should return null when user not found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE id = $1",
  [
    999,
  ],
]
`;

exports[`UserRepository get should return null when user not found: User result 1`] = `null`;

exports[`UserRepository getByUsername should get user by username: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = 'testuser'"`;

exports[`UserRepository getByUsername should get user by username: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = $1",
  [
    "testuser",
  ],
]
`;

exports[`UserRepository getByUsername should get user by username: User result 1`] = `
{
  "email": "test@example.com",
  "username": "testuser",
}
`;

exports[`UserRepository getByUsername should return null when user not found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = 'nonexistent'"`;

exports[`UserRepository getByUsername should return null when user not found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username = $1",
  [
    "nonexistent",
  ],
]
`;

exports[`UserRepository getByUsername should return null when user not found: User result 1`] = `null`;

exports[`UserRepository getFollow should get a follow successfully 1`] = `
{
  "createdAt": 2023-01-01T00:00:00.000Z,
  "followedId": 2,
  "userId": 1,
}
`;

exports[`UserRepository getFollow should get a follow successfully: Interpolated SQL query 1`] = `
"
      SELECT userId, followedId, created_at AS "createdAt"
      FROM follows
      WHERE userId = 1 AND followedId = 2
    "
`;

exports[`UserRepository getFollow should return undefined when follow does not exist: Interpolated SQL query 1`] = `
"
      SELECT userId, followedId, created_at AS "createdAt"
      FROM follows
      WHERE userId = 1 AND followedId = 2
    "
`;

exports[`UserRepository getFollows should get followers users successfully 1`] = `
[
  {
    "followCreatedAt": 2023-01-01T00:00:00.000Z,
    "id": 2,
    "name": "User One",
    "username": "user1",
  },
  {
    "followCreatedAt": 2023-01-02T00:00:00.000Z,
    "id": 3,
    "name": "User Two",
    "username": "user2",
  },
]
`;

exports[`UserRepository getFollows should get followers users successfully: Interpolated SQL query 1`] = `
"
      SELECT id, username, name, follows.created_at AS followCreatedAt
      FROM follows
      INNER JOIN users ON follows.userId = users.id
      WHERE followedId = 1
      ORDER BY follows.created_at DESC
    "
`;

exports[`UserRepository getFollows should get following users successfully 1`] = `
[
  {
    "followCreatedAt": 2023-01-01T00:00:00.000Z,
    "id": 2,
    "name": "User One",
    "username": "user1",
  },
  {
    "followCreatedAt": 2023-01-02T00:00:00.000Z,
    "id": 3,
    "name": "User Two",
    "username": "user2",
  },
]
`;

exports[`UserRepository getFollows should get following users successfully: Interpolated SQL query 1`] = `
"
      SELECT id, username, name, follows.created_at AS followCreatedAt
      FROM follows
      INNER JOIN users ON follows.followedId = users.id
      WHERE userId = 1
      ORDER BY follows.created_at DESC
    "
`;

exports[`UserRepository getList should get list of users that match "has" partially: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE 'user%'"`;

exports[`UserRepository getList should get list of users that match "has" partially: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE $1",
  [
    "user%",
  ],
]
`;

exports[`UserRepository getList should get list of users that match "has" partially: Users list result 1`] = `
[
  {
    "email": "user1@example.com",
    "id": 1,
    "username": "user1",
  },
  {
    "email": "user2@example.com",
    "id": 2,
    "username": "user2",
  },
]
`;

exports[`UserRepository getList should get list of users that match "has" totally: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE 'user1%'"`;

exports[`UserRepository getList should get list of users that match "has" totally: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE $1",
  [
    "user1%",
  ],
]
`;

exports[`UserRepository getList should get list of users that match "has" totally: Users list result 1`] = `
[
  {
    "email": "user1@example.com",
    "id": 1,
    "username": "user1",
  },
]
`;

exports[`UserRepository getList should get list of users: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE '%'"`;

exports[`UserRepository getList should get list of users: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE $1",
  [
    "%",
  ],
]
`;

exports[`UserRepository getList should get list of users: Users list result 1`] = `
[
  {
    "email": "user1@example.com",
    "id": 1,
    "username": "user1",
  },
  {
    "email": "user2@example.com",
    "id": 2,
    "username": "user2",
  },
]
`;

exports[`UserRepository getList should return null when no users found: Interpolated SQL query 1`] = `"SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE '%'"`;

exports[`UserRepository getList should return null when no users found: SQL query 1`] = `
[
  "SELECT id, username, email, name, lastname, birthdate, created_at AS "createdAt" FROM users WHERE username LIKE $1",
  [
    "%",
  ],
]
`;

exports[`UserRepository getList should return null when no users found: Users list result 1`] = `[]`;
